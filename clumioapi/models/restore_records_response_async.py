#
# Copyright 2023. Clumio, A Commvault Company.
#

from typing import Any, Dict, Mapping, Optional, Sequence, Type, TypeVar

from clumioapi.models import read_task_hateoas_outer_embedded as read_task_hateoas_outer_embedded_
from clumioapi.models import restore_records_links_async as restore_records_links_async_

T = TypeVar('T', bound='RestoreRecordsResponseAsync')


class RestoreRecordsResponseAsync:
    """Implementation of the 'RestoreRecordsResponseAsync' model.

    Records restore request accepted

    Attributes:
        embedded:
            Embedded responses related to the resource.
        links:
            URLs to pages related to the resource.
        passcode:
            passcode that the end-user must use to access the restored
            file, in case when restored file was emailed to the end-user as part
            of transparent data access.
        task_id:
            The Clumio-assigned ID of the task generated by this request.
            The requested records will be available for asynchronous download when the Task
            completes.
            Use the [GET /restores/aws/dynamodb-tables/records](#operation/list-restored-
            records-aws-dynamodb-table)
            endpoint to list the records available for download.
            If `"preview":true` was set in the request, then a preview of the result
            will be given instead of a Task ID, and this field will be omitted.
    """

    # Create a mapping from Model property names to API property names
    _names: dict[str, str] = {
        'embedded': '_embedded',
        'links': '_links',
        'passcode': 'passcode',
        'task_id': 'task_id',
    }

    def __init__(
        self,
        embedded: read_task_hateoas_outer_embedded_.ReadTaskHateoasOuterEmbedded | None = None,
        links: restore_records_links_async_.RestoreRecordsLinksAsync | None = None,
        passcode: str | None = None,
        task_id: str | None = None,
    ) -> None:
        """Constructor for the RestoreRecordsResponseAsync class."""

        # Initialize members of the class
        self.embedded: read_task_hateoas_outer_embedded_.ReadTaskHateoasOuterEmbedded | None = (
            embedded
        )
        self.links: restore_records_links_async_.RestoreRecordsLinksAsync | None = links
        self.passcode: str | None = passcode
        self.task_id: str | None = task_id

    @classmethod
    def from_dictionary(cls: Type[T], dictionary: Mapping[str, Any]) -> T:
        """Creates an instance of this model from a dictionary

        Args:
            dictionary: A dictionary representation of the object as obtained
                from the deserialization of the server's response. The keys
                MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.
        """

        dictionary = dictionary or {}
        # Extract variables from the dictionary
        val = dictionary.get('_embedded', None)
        val_embedded = (
            read_task_hateoas_outer_embedded_.ReadTaskHateoasOuterEmbedded.from_dictionary(val)
        )

        val = dictionary.get('_links', None)
        val_links = restore_records_links_async_.RestoreRecordsLinksAsync.from_dictionary(val)

        val = dictionary.get('passcode', None)
        val_passcode = val

        val = dictionary.get('task_id', None)
        val_task_id = val

        # Return an object of this model
        return cls(
            val_embedded,
            val_links,
            val_passcode,
            val_task_id,
        )
